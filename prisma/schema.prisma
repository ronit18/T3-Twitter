generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

//My models
model Tweet {
    id        String   @id @default(uuid())
    userid    String
    content   String
    createdAt DateTime @default(now())

    user User @relation(fields: [userid], references: [id], onDelete: Cascade)

    @@index([userid])
}

model Like {
    userid  String
    tweetid String
    user    User   @relation(fields: [userid], references: [id], onDelete: Cascade)

    @@id([userid, tweetid])
    @@index([tweetid])
    @@index([userid])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    //Non-Next-Auth ---> My Models
    Tweets    Tweet[]
    Like      Like[]
    followers User[]  @relation(name: "Followers")
    follows   User[]  @relation(name: "Followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
